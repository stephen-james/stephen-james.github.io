<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Stephen James&#39; Code Blog</title>
    <link>http://blog.stvjam.es/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 23 Jan 2017 12:02:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Using quotes in Git command line commit messages</title>
      <link>http://blog.stvjam.es/2016/11/using-quotes-in-git-command-line-commit-messages/</link>
      <guid>http://blog.stvjam.es/2016/11/using-quotes-in-git-command-line-commit-messages/</guid>
      <pubDate>Mon, 28 Nov 2016 00:00:00 GMT</pubDate>
      <description>
      
        A look at the minefield that is the terminal when using &lt;code&gt;git commit -m&lt;/code&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Note: This post refers to running git commands in a terminal running a bash shell… YMMV.</em></p>
<p>I love using git from the command line, I have SourceTree installed which is a fantastic GUI, but I’ve found that for me personally nothing beats the level of control and response that you get from manually performing Git operations.  That said, something that often trips me up is when I start quoting terms in my commit messages, I land up breaking syntax…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &apos;test commit &apos;hello world&apos;&apos;</div><div class="line">error: pathspec &apos;test commit hello&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;world&apos; did not match any file(s) known to git.</div></pre></td></tr></table></figure>
<p>While its easy to spot that I’m doing something stupid in the above commit, its very easy to let an apostrophe slip into a longer and more natural commit message:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &apos;Here is the summary of my commit</div><div class="line"></div><div class="line">And a sentence or two where I describe it&apos;s background before I move on and create a bulletted list of change explanations...</div><div class="line">error: pathspec &apos;Here is the summary of my commit</div><div class="line"></div><div class="line">And a sentence or two where I describe its&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;background&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;before&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;I&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;move&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;on&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;and&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;create&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;a&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;bulletted&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;list&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;of&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;change&apos; did not match any file(s) known to git.</div><div class="line">error: pathspec &apos;explanations...&apos; did not match any file(s) known to git.</div></pre></td></tr></table></figure>
<p>Easy to do right?  Just an apostrophe in <code>it&#39;s</code> is all it takes…</p>
<p>I used to hack around this, lazily and at the expense of my commit messages I would use a backtick instead of quotes, and frequently omit grammatical apostrophes.  <em>Yuck!</em> I need to change that right?!</p>
<p>Immediately I have three options or habits to adopt to prevent me from falling into this trap again:</p>
<ol>
<li>Get off the command line and use a GUI</li>
<li>Stop writing commit messages inline and use an editor in my shell</li>
<li>Escape my quotes</li>
</ol>
<h2 id="Option-1-Use-a-GUI"><a href="#Option-1-Use-a-GUI" class="headerlink" title="Option 1: Use a GUI"></a>Option 1: Use a GUI</h2><p>As I alluded to earlier, this just doesn’t work for me, I admit from time to time I do, but since so much of what I do is driven from the terminal, it is my happy space and I’d rather not!</p>
<h2 id="Option-2-Use-an-editor-in-terminal"><a href="#Option-2-Use-an-editor-in-terminal" class="headerlink" title="Option 2: Use an editor in terminal"></a>Option 2: Use an editor in terminal</h2><p>I normally perform commits using the git alias <code>git cm</code> == <code>git commit -m</code> to save keystrokes… If I rather performed a <code>git commit</code> (without the <code>-m</code> modifier) that would open up vi editor and I could edit my message to my heart’s content before saving and exiting.</p>
<p>In all fairness, this is probably a good option, just a workflow I’m slightly less used to.  It <em>feels</em> like more steps, more keypresses (to enter INSERT mode in vi, to do the old ESC, <code>:wq</code> sequence).  </p>
<p>Yet, if I truly have to craft a message, I’d win from the extra editing power available.  I should probably give this habit a 30 day trial :D</p>
<h2 id="Option-3-Escape-my-Quotes"><a href="#Option-3-Escape-my-Quotes" class="headerlink" title="Option 3: Escape my Quotes"></a>Option 3: Escape my Quotes</h2><p>This is the screamingly obvious solution, but one that is less than intuitive to many, myself included.</p>
<h3 id="Mixing-Quotes"><a href="#Mixing-Quotes" class="headerlink" title="Mixing Quotes"></a>Mixing Quotes</h3><p>There is a false confidence solution, which is to mix your quotes… You can use doubles for the message and singles for anything you’re quoting inside the message, but this fails quickly when you use the dollar sign, since the terminal will expect that this is a variable:</p>
<p>ie. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cm &quot;This works Mr O&apos;Gregor&quot;</div></pre></td></tr></table></figure>
<p>whereas:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git cm &quot;This won&apos;t because of the dollar sign in scope.$apply the apply part will be interpreted as a variable - and omitted!&quot;</div><div class="line">[master fcce7f3] This won&apos;t because of the dollar sign in scope. the apply part will be interpreted as a variable - and omitted!</div><div class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 myfile.txt</div></pre></td></tr></table></figure>
<p><em>And thats where it gets dangerous</em>.  Given how often I refer to <code>$</code> prefixed terms in my messages, this is likely to catch me out and since it <em>does actually</em> perform the commit I may not even notice!</p>
<p>Yes, I can escape the <code>$</code>, as in <code>git cm &quot;\$moneydollars&quot;</code> but there is a big chance I may not remember to.</p>
<h3 id="Using-Single-Quotes"><a href="#Using-Single-Quotes" class="headerlink" title="Using Single Quotes"></a>Using Single Quotes</h3><p>The terminal interpolation of variables makes double quotes dangerous and fortunately using single quotes around the commit message  prevents this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git cm &apos;this will not interpolate: $example&apos;</div><div class="line">[master 7580885] this will not interpolate: $example</div><div class="line">1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line">create mode 100644 myfile.txt</div></pre></td></tr></table></figure>
<p>Great stuff, no PEBKAC error happening, so this is a much better habit to get into, <em>but what about apostrophes</em>?</p>
<p>I’ll still need to escape them but this won’t cut the mustard:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cm &apos;It\&apos;s... not going to work&apos;</div></pre></td></tr></table></figure>
<p>While simply escaping the offending character is inuitive to most C style coders, thats simply not how the terminal parses the statement.</p>
<p>It will believe my statement is ongoing and the terminal will offer me a continuation prompt <code>&gt;</code>.</p>
<p>What <em>will</em> work is if I escape it correctly for the terminal like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cm &apos;It&apos;\&apos;&apos;s... going to work this time!&apos;</div></pre></td></tr></table></figure>
<p>Seemingly bizarre to the uninitiated, but try this out in your terminal:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;hello&apos;</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>As expected, but now try this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;he&apos;ll&apos;o&apos;</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>The terminal is parsing the string from the first apostrophe… When it finds the next it will look for another apostrophe and concatentate the contents, then it will resume parsing and concatenating until it finds the last apostrophe at which point it stops string parsing.</p>
<p>An in depth explanation of this can be found in <a href="http://stackoverflow.com/a/1250279/2086972" target="_blank" rel="external">this SO answer by liori</a> and <a href="http://stackoverflow.com/a/1315213/2086972" target="_blank" rel="external">this one by Adrian Pronk</a>.</p>
<p><em>Phew! and there we were thinking this would be simple</em></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Given how easy it is to mess things up with inline commit messages (using the <code>-m</code> switch) I think it is definitely worth committing using a shell editor (like vi/vim) a try.</p>
<p>If you <em>do</em> want to use inline commit messages, be wary of the issues and my recommendations are:</p>
<ul>
<li>Use single quote message delimiters to avoid potentially losing parts of your commit messages identified as variables unknowingly.</li>
<li>Escape apostrophes in the message using <code>&#39;\&#39;&#39;</code></li>
</ul>
<p>Please hit me up on the comments if you have a better way, I’ll be very keen to hear it!</p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2016/11/using-quotes-in-git-command-line-commit-messages/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Creating an emanating button</title>
      <link>http://blog.stvjam.es/2016/11/creating-an-emanating-button/</link>
      <guid>http://blog.stvjam.es/2016/11/creating-an-emanating-button/</guid>
      <pubDate>Sun, 27 Nov 2016 00:00:00 GMT</pubDate>
      <description>
      
        Where I take the simplest part of Monument Valley (the emanating Complete button) and create a basic version with CSS.
      
      </description>
      
      <content:encoded><![CDATA[<p>Tonight I was re-visiting one of my all time favourite games, Monument Valley.</p>
<p><img src="http://res.cloudinary.com/cylink/image/upload/c_scale,w_768/v1480286243/blog.stvjam.es/emanating-button/monument-valley-screenshot.jpg" alt="Hard not to love"></p>
<p>I found that just as the first time I played it, I was utterly dumbstruck by the simplicity and sheer elegance of the game.  I played my way through the first few levels until I started to get that sudden urge to create something with a beautiful color pallette and subtle gradients, or to code some particle effects… or even mess about with HTML 5 audio and some zenlike string sounds.</p>
<p>I was inspired, perhaps not to create, but definitely to imitate… I was inspired to try take a little slice of that world and translate it into my world, the world of CSS and JavaScript and other technology utterly unsuited to creating a playable Escher painting with bizarre 3D calculations.  Yes, I would need to start small…. Equally because I had a pizza in the oven and a movie lined up for once it was done, it would have to be a 15 minuter…</p>
<p>Ok, the button, how about that button that comes up at the poignant conclusion of every level?  The roundy one with the emanating ring that is so ensō zen simple but sooo works?!</p>
<p>Yup, that’d have to do!</p>
<figure><br>    <p data-height="265" data-theme-id="0" data-slug-hash="MbvqMB" data-default-tab="result" data-user="stephen-james" data-embed-version="2" data-pen-title="Emanating button - inspired by Monument Valley" class="codepen">See the Pen <a href="http://codepen.io/stephen-james/pen/MbvqMB/" target="_blank" rel="external">Emanating button - inspired by Monument Valley</a> by Stephen James (<a href="http://codepen.io/stephen-james" target="_blank" rel="external">@stephen-james</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br>    <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br>    <figcaption>My implementation of an emanating button <a href="http://codepen.io/stephen-james/pen/MbvqMB" target="_blank" rel="external">code here</a></figcaption><br></figure>

<p>I wanted to use intrinsics as much as possible and didn’t want to go down the SVG route, so I am using a normal <code>button</code> dropping a heavy border on it and <code>border-radius: 50%</code> to turn it into a circle.</p>
<p>The next part I needed was the ring that emanates/ripples outwards.  I didn’t want to write some wrapper div and I definitely didn’t want to add one with JavaScript, but fortunately a pseudo element served just fine.</p>
<p>I had to offset it’s position by the buttons border size, ie. <code>position: absolute; top: -6px, left: -6px;</code> and then applied an animation to it transformed the scale and modified the ring’s border width and opacity and what I thought would be sensible points in a 0-100% sequence.</p>
<p>Finally I had to assign <code>animation-iteration-count: infinite;</code> to keep it rippling away.</p>
<p>All in all, quite happy with the result and it was fun to grab something I liked and try and imitate it, next time I’ll try make it something a bit more impressive, but hey, I enjoyed it :D</p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2016/11/creating-an-emanating-button/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Migrating to Hexo</title>
      <link>http://blog.stvjam.es/2016/11/hello-world/</link>
      <guid>http://blog.stvjam.es/2016/11/hello-world/</guid>
      <pubDate>Fri, 25 Nov 2016 00:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Well it looks like I’m finally pulling the trigger on my old Blogger blog and moving it over to Hexo :D … It’s not you Blogger, it’s me - I just infinitely prefer writing in markdown and git based publishing!&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Well it looks like I’m finally pulling the trigger on my old Blogger blog and moving it over to Hexo :D … It’s not you Blogger, it’s me - I just infinitely prefer writing in markdown and git based publishing!<br><a id="more"></a> </p>
<p>UPDATE:  That was possibly one of the easiest transitions I could have hoped for, if anyone is interested I followed these steps:</p>
<ol>
<li>Followed the simple npm install instructions over <a href="https://hexo.io/" target="_blank" rel="external"><code>hexo.io</code></a></li>
<li>Copied and translated my Blogger posts from HTML to Markdown using <a href="https://www.npmjs.com/package/to-markdown" target="_blank" rel="external"><code>to-markdown</code></a>  (Admittedly, I didn’t have many posts to convert :) )</li>
<li>Ensured I saved each post with the same slugged abbreviated title that Blogger had used for the permalinks (this was to simplify redirects which you’ll see in Step 5)</li>
<li>Generated and Deployed my blog with <code>hexo generate</code> and <code>hexo deploy</code> to my Github Pages repo</li>
<li><p>Modified my Blogger template with pseudo-canonical redirects using technique shown in <a href="http://www.wpbeginner.com/wp-tutorials/how-to-switch-from-blogger-to-wordpress-without-losing-google-rankings/" target="_blank" rel="external">How to Switch from Blogger to WordPress…</a><br>While the Blogger=&gt;Wordpress article is great, the necessity of using JavaScript to redirect in lieue of Blogger offering a 301 service is unfortunate.  Also I refer to the links as pseudo-canonical because since we are unable to manipulate strings in the Blogger template, the solution revolves around passing a query string param that the new blog can parse and in turn redirect to the correct post.  This is not really canonical, as the true canonical url would be the new blogs permalink - not some transient url with a param.  I added some JavaScript to modify the <code>&lt;link rel=&quot;canonical&quot;&gt;</code> in the Blogger document head to the correct value, but am unsure whether crawlers will pick this link up pre, or post JS execution.  Bearing in mind that Google does execute JS, but I’m not sure at exactly the stage it does this and for what type of scraping.</p>
<p>Here is my best attempt at bending template to my will… A 301 would be far preferable!</p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="bBYYKz" data-default-tab="html" data-user="stephen-james" data-embed-version="2" data-pen-title="Hacking Blogger template for JS Redirects and canonical links" class="codepen">See the Pen <a href="http://codepen.io/stephen-james/pen/bBYYKz/" target="_blank" rel="external">Hacking Blogger template for JS Redirects and canonical links</a> by Stephen James (<a href="http://codepen.io/stephen-james" target="_blank" rel="external">@stephen-james</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
</li>
<li><p>Added a function which I call to catch the <code>blogger=&lt;Blogger Permalink&gt;</code> style redirects and convert them to how I’ve configured my Hexo Permalinks</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function redirectBloggerLinks() &#123;</div><div class="line">    var search = window.location.search;</div><div class="line">    if (search.startsWith(&apos;?blogger=&apos;)) &#123;</div><div class="line">        var expression = /(?:http:\/\/example.com\/\?blogger=http:\/\/example.blogspot.co.uk)(.*)/g;</div><div class="line">        var matches = expression.exec(window.location.href);</div><div class="line"></div><div class="line">        if (matches &amp;&amp; matches.length === 2) &#123;</div><div class="line">            window.location.href = matches[1].replace(/\.html$/g, &apos;&apos;) + &apos;/&apos;;</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I call this method in the theme’s <code>index.js</code> file.</p>
</li>
<li>The rest was tweaks and experimentation, I have settled on using the <a href="https://github.com/jaredly/hexium" target="_blank" rel="external">Hexium</a> theme, and am just modding it to fit my needs - which so far has proven easy enough.  If you’re leaning towards the same theme, check this issue which may still help you out if you get in a pickle with <a href="https://github.com/jaredly/hexium/issues/3" target="_blank" rel="external">funny boilerplate messages</a></li>
</ol>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2016/11/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mocking/Stubbing CommonJS Dependencies with Browserify and Karma</title>
      <link>http://blog.stvjam.es/2015/05/mockingstubbing-dependencies-for-unit/</link>
      <guid>http://blog.stvjam.es/2015/05/mockingstubbing-dependencies-for-unit/</guid>
      <pubDate>Mon, 18 May 2015 23:00:00 GMT</pubDate>
      <description>
      
        Mocking, stubbing and strategies for dependency injection are often overly complex parts of the JavaScript test code we have to write. But they help us isolate the unit that we want to test. In this article I look at using &lt;code&gt;proxyquire&lt;/code&gt; and &lt;code&gt;proxyquireify&lt;/code&gt;.
      
      </description>
      
      <content:encoded><![CDATA[<p>Mocking, stubbing and strategies for dependency injection are often overly complex parts of the JavaScript test code we have to write. But they help us isolate the unit that we want to test. Since CommonJS modules often act as a natural seam for a unit, it makes perfect sense that test frameworks like <a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest</a> automatically mock CommonJS dependencies.<br><a id="more"></a></p>
<p>While Jest looks absolutely awesome and can do other great things like like parallel testing, <code>runAllTimers</code> and provide promise helpers, Karma and Jasmine are still my weapons of choice and firmly fastened to the old utility belt… Especially now that I’ve found the <a href="https://www.npmjs.com/package/karma-nyan-reporter" target="_blank" rel="external">karma nyan reporter</a> ;)</p>
<p><a href="http://4.bp.blogspot.com/-OdFyNd7CO6A/VVvA0SJeWKI/AAAAAAAAAHw/HGIDsNPxw1c/s1600/nyan-cat.PNG" target="_blank" rel="external"><img src="http://4.bp.blogspot.com/-OdFyNd7CO6A/VVvA0SJeWKI/AAAAAAAAAHw/HGIDsNPxw1c/s320/nyan-cat.PNG" alt=""></a></p>
<p>But I’m not here to talk about karma reporters, as colourful as they can be…</p>
<h2 id="So-how-do-we-stub-CommonJS-Dependencies"><a href="#So-how-do-we-stub-CommonJS-Dependencies" class="headerlink" title="So how do we stub CommonJS Dependencies?"></a>So how do we stub CommonJS Dependencies?</h2><p><a href="https://github.com/thlorenz/proxyquire" target="_blank" rel="external">proxyquire</a> is a super easy to use proxy for requiring modules, that takes an object literal of stubbed dependencies as it’s second argument.</p>
<p>In the following example we’re going to test a member service, which has a create method and for the purposes of testing we want to isolate it from the ajax service call.</p>
<p><code>member.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var ajax = require(&apos;./ajax&apos;);</div><div class="line"></div><div class="line">var member = &#123;</div><div class="line">    create: function(firstName, surname) &#123;</div><div class="line">        return ajax.post(&#123;</div><div class="line">            firstName: firstName,</div><div class="line">            surname: surname</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = member;</div></pre></td></tr></table></figure>
<p>In our test spec, we’ll require <code>member.js</code> via proxy and stub out the ajax service to return a successfully resolved promise containing a member number.</p>
<p><code>member.spec.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var proxyquire = require(&apos;proxyquire&apos;);</div><div class="line">// use a helper to return a promise like the ajax post</div><div class="line">// method would</div><div class="line">var promiseStub = require(&apos;promiseStub&apos;);</div><div class="line">var ajaxStub = &#123;</div><div class="line">    post: function() &#123;</div><div class="line">        return promiseStub.success(&apos;MEM1234&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var member = proxyquire(&apos;../member&apos;, &#123;</div><div class="line">    &apos;./ajax&apos; : ajaxStub</div><div class="line">&#125;);</div><div class="line"></div><div class="line">describe(&apos;using proxyquire&apos;, function() &#123;</div><div class="line">    var memberNumber;</div><div class="line"></div><div class="line">    beforeEach(function (done) &#123;</div><div class="line">        member.create(&apos;Peter&apos;, &apos;Rabbit&apos;).then(function (data) &#123;</div><div class="line">            memberNumber = data;</div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it(&apos;subsitutes the required module for the stub&apos;, function() &#123;</div><div class="line">        expect(memberNumber).toBe(&apos;MEM1234&apos;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>It’s worth noting that the path to the stubbed module (ie. <code>&#39;./ajax&#39;</code>) is relative to the location of <code>member.js</code>, not <code>member.spec.js</code>.</p>
<h2 id="Browserify-proxyquire-proxyquireify"><a href="#Browserify-proxyquire-proxyquireify" class="headerlink" title="Browserify + proxyquire = proxyquireify"></a>Browserify + proxyquire = proxyquireify</h2><p><a href="https://github.com/thlorenz" target="_blank" rel="external">@tlorenz</a>, the smart guy behind proxyquire also put together <a href="https://github.com/thlorenz/proxyquireify" target="_blank" rel="external">proxyquireify</a> for use with browserify, and the usage is near identical to the above CommonJS examples except for a couple of reference changes.</p>
<p>Heres a walkthrough of steps to get it working with Browserify and Karma :</p>
<ul>
<li><p>Install the proxyquireify node module</p>
<p><code>npm install proxyquireify --save-dev</code></p>
</li>
<li><p>Edit your <code>karma.conf.js</code> file</p>
<ul>
<li>put <code>var proxyquire = require(&#39;proxyquireify&#39;);</code> at the top of the file</li>
<li><p>in the <code>browserify</code> section, add a <code>configure</code> function to add the proxyquire plugin to browserify and set the root folder for the tests.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">configure: function(bundle) &#123;</div><div class="line">    bundle</div><div class="line">        .plugin(proxyquire.plugin)</div><div class="line">        .require(require.resolve(&apos;./src/javascript/__tests__&apos;), &#123; entry: true &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>you can find my full karma.conf.js in a <a href="https://gist.github.com/stephen-james/f1bc040fc7d76db955e4" target="_blank" rel="external">gist here</a></em></p>
</li>
</ul>
</li>
<li><p>Create some test specs</p>
<ul>
<li><p>create an <code>index.js</code> file in the folder you used in the configure section in karma and reference all the specs you want to run by requiring them with standard <code>require</code> calls.</p>
<p>so given a structure like this…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/__test__</div><div class="line">    index.js</div><div class="line">    /spec</div><div class="line">        auth.spec.js</div><div class="line">        member.spec.js</div></pre></td></tr></table></figure>
<p>… <code>index.js</code> would look like this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(&apos;./spec/auth.spec.js&apos;);</div><div class="line">require(&apos;./spec/member.spec.js&apos;);</div></pre></td></tr></table></figure>
<p>And in the spec files themselves we just pull in proxyquire with <code>var proxyquire = require(&#39;proxyquireify&#39;)(require);</code></p>
<p>eg.</p>
<p><code>member.spec.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var proxyquire = require(&apos;proxyquireify&apos;)(require);</div><div class="line"></div><div class="line">   // use a helper to return a promise like the ajax post</div><div class="line">   // method would</div><div class="line">   var promiseStub = require(&apos;promiseStub&apos;);</div><div class="line"></div><div class="line">   var ajaxStub = &#123;</div><div class="line">       post: function() &#123;</div><div class="line">           return promiseStub.success(&apos;MEM1234&apos;);</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   var member = proxyquire(&apos;../member&apos;, &#123;</div><div class="line">       &apos;./ajax&apos; : ajaxStub</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   describe(&apos;using proxyquire&apos;, function() &#123;</div><div class="line">       var memberNumber;</div><div class="line"></div><div class="line">       beforeEach(function (done) &#123;</div><div class="line">           member.create(&apos;Peter&apos;, &apos;Rabbit&apos;).then(function (data) &#123;</div><div class="line">               memberNumber = data;</div><div class="line">               done();</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       it(&apos;subsitutes the required module for the stub&apos;, function() &#123;</div><div class="line">          expect(memberNumber).toBe(&apos;MEM1234&apos;);</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>And thats it, Happy stubbing!</p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2015/05/mockingstubbing-dependencies-for-unit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>I&#39;m feeling lucky for git command line</title>
      <link>http://blog.stvjam.es/2014/12/im-feeling-lucky-for-git-command-line/</link>
      <guid>http://blog.stvjam.es/2014/12/im-feeling-lucky-for-git-command-line/</guid>
      <pubDate>Wed, 10 Dec 2014 00:00:00 GMT</pubDate>
      <description>
      
        Ever wanted to checkout a branch using a partial identifier, in a one-shot &quot;I&#39;m feeling lucky&quot; kind of way?  Well here ya go cow(boy|gal)...
      
      </description>
      
      <content:encoded><![CDATA[<p>This short post describes using a git alias for checking out branches like “I’m feeling lucky”, ie. the first branch matching the entered text gets checked out…</p>
<p>This makes sense working in a ticketing system for features, with a branch per ticket policy, where branches are often named <code>[PROJECT CODE]-[TICKET NUMBER]-[FEATURE DESCRIPTION]</code></p>
<p>Instead of typing <code>git checkout AWSM-1234-a-fantastic-feature</code> I just want to address it by ticket number, or any unique text combination that I know of in the feature description.</p>
<p>So I put together a couple of aliases that can be included in the [alias] section of your .gitconfig file to make this easy</p>
<h3 id="Git-Lucky"><a href="#Git-Lucky" class="headerlink" title="Git Lucky!"></a>Git Lucky!</h3><p><code>lucky = &quot;!f() { git branch | grep -i &quot; $1 &quot; | head -1 | xargs -r git checkout; }; f&quot;</code></p>
<p>(UPDATE: on some terminal’s you may need to omit the -r after xargs…)</p>
<p><code>lucky = &quot;!f() { git branch | grep -i &quot; $1 &quot; | head -1 | xargs git checkout; }; f&quot;</code></p>
<p>Using this you can check out the <code>AWSM-1234-a-fantastic-feature</code> branch with either</p>
<p><code>git lucky 1234</code></p>
<p>or</p>
<p><code>git lucky fantastic</code></p>
<h3 id="Git-Find"><a href="#Git-Find" class="headerlink" title="Git Find"></a>Git Find</h3><p>I’m pretty sure there are variants of this out there already, but this just shortcuts grokking through your branch list on your local repo to find a branch with some text</p>
<p><code>find = &quot;!f() { git branch | grep -i &quot; $1 &quot;; }; f&quot;</code></p>
<p>If I want to list all branches that contain the text ‘chart’ I can do <code>git find chart</code> and get that list</p>
<p>Personally this scratches an itch for me, I used to use <code>git br | grep -i whatever</code> and then <code>git co</code>, but being able to do it in one is pretty handy, and in quite a few cases, git lucky is all I need if I know something unique about the branch name.</p>
<p><em>For more info on setting up aliases and an explanation of the function syntax used for these commands, take a look at <a href="http://haacked.com/archive/2014/07/28/github-flow-aliases/" target="_blank" rel="external">Phil Haacks great article on github flow aliases</a></em></p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2014/12/im-feeling-lucky-for-git-command-line/#disqus_thread</comments>
    </item>
    
    <item>
      <title>A beginners guide to starting a new web app with Karma, Jasmine and RequireJS</title>
      <link>http://blog.stvjam.es/2014/05/lab-beginners-guide-to-starting-new-web/</link>
      <guid>http://blog.stvjam.es/2014/05/lab-beginners-guide-to-starting-new-web/</guid>
      <pubDate>Mon, 26 May 2014 23:00:00 GMT</pubDate>
      <description>
      
        Using the mighty Karma as a test runner for non-Angular projects from scratch, highlighting a couple of common errors.
      
      </description>
      
      <content:encoded><![CDATA[<p>Karma test runner is a really simple and relatively easy way to run JavaScript across multiple browsers, automatically test code changes (using watchers) and it also integrates neatly into task runners like Grunt, so it can be chained nicely into a <code>Lint &gt; Build &gt; Test &gt; Distribute</code> type of process. Coupled with this, it really plays well with RequireJS…</p>
<p>The only problem is, when things go wrong with misconfiguration you can run into errors like :</p>
<p><code>There is no timestamp for /base/src/someScript.js</code></p>
<p>or</p>
<p><code>Mismatched anonymous define() module: ...</code></p>
<p>So the first time you’re setting it up, it helps to understand those errors and how to patch them up and also to know the sequence of configs and package installations to get off the ground. If you’re just interested in those errors see <a href="#troubleshooting">Troubleshooting</a>.</p>
<p>In this lab I’ll walk through (in fairly painful detail!) setting up a web app and all the scaffolding required. Each step has been committed to a git repository for reference, so after initial setup you can advance through the lab manually (recommended!) or use git to checkout each step. <a href="https://github.com/stephen-james/lab-karma-require-jasmine/releases" target="_blank" rel="external">view steps on github</a></p>
<h2 id="Step-0-Prerequisites-and-Initial-Setup"><a href="#Step-0-Prerequisites-and-Initial-Setup" class="headerlink" title="Step 0 - Prerequisites and Initial Setup"></a>Step 0 - Prerequisites and Initial Setup</h2><p>This lab assumes you have <a href="http://nodejs.org/download/" target="_blank" rel="external"><code>npm</code></a> and <a href="http://git-scm.com/downloads" target="_blank" rel="external"><code>git</code></a> installed and that you are familiar with both.</p>
<p>To get started with the lab, clone the <a href="https://github.com/stephen-james/lab-karma-require-jasmine" target="_blank" rel="external">repository</a> and checkout <code>step 0 - basic structure</code> as follows:</p>
<ol>
<li><p>In your dev folder, run the following<br> <code>git clone https://github.com/stephen-james/lab-karma-require-jasmine.git</code></p>
</li>
<li><p>Change directory to the cloned repo<br> <code>cd lab-karma-require-jasmine</code></p>
</li>
<li><p>And checkout the starting point of this lab, step 0…<br> <code>git checkout step0</code></p>
</li>
</ol>
<p>While everyone has their own preferred folder structure for web apps, for the purposes of this lab we’ll be using the following basic structure :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/src</div><div class="line">     JavaScript source folder for the sample web application created in this lab</div><div class="line">/test</div><div class="line">     the test driver&apos;s (Karma) bootstrap for RequireJS and contained specs for this lab</div></pre></td></tr></table></figure>
<h2 id="Step-1-Initialising-the-Web-Application-as-an-npm-package"><a href="#Step-1-Initialising-the-Web-Application-as-an-npm-package" class="headerlink" title="Step 1 - Initialising the Web Application as an npm package"></a>Step 1 - Initialising the Web Application as an npm package</h2><p>Its typical in a web app that we’ll have quite a few dependencies, but we don’t want to commit these to our repository. Its way cleaner to use a package manager that stores a list of dependencies and to exclude them explicitly using a <code>.gitignore</code> file.</p>
<p>For this lab, we’ll be using npm as the package manager. So we should create a <code>.gitignore</code> file to ignore any dependencies it loads in <code>node_modules</code></p>
<p>Next up we’ll create the <code>package.json</code> file for this project using npm. While we’d never want to actually publish this sample app on npm, this will help us describe the project and in future steps will also list dependencies. <em><a href="https://www.npmjs.org/doc/json.html" target="_blank" rel="external">more information on package.json</a></em></p>
<p><em>You can follow along through the npm init wizard, or alternatively just create the package.json manually.</em></p>
<h3 id="Using-npm-init"><a href="#Using-npm-init" class="headerlink" title="Using npm init"></a>Using npm init</h3><p>Run <code>npm init</code> from the root folder of the web app, follow the sample below…</p>
<h4 id="Sample-using-npm-init-from-comand-line"><a href="#Sample-using-npm-init-from-comand-line" class="headerlink" title="Sample : using npm init from comand line"></a>Sample : using npm init from comand line</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">C:\dev\lab-karma-require-jasmine</div><div class="line"></div><div class="line">&gt;npm init</div><div class="line">This utility will walk you through creating a package.json file.</div><div class="line">It only covers the most common items, and tries to guess sane defaults.</div><div class="line"></div><div class="line">See `npm help json` for definitive documentation on these fields</div><div class="line">and exactly what they do.</div><div class="line"></div><div class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</div><div class="line">save it as a dependency in the package.json file.</div><div class="line"></div><div class="line">Press ^C at any time to quit.</div><div class="line">name: (lab-karma-require-jasmine)</div><div class="line">version: (0.0.0)</div><div class="line">description: A step-by-step lab for setting up a simple JavaScript centric web a</div><div class="line">pp using RequireJS, Karma and Jasmine</div><div class="line">entry point: (index.js) index.html</div><div class="line">test command:</div><div class="line">git repository: (https://github.com/stephen-james/lab-karma-require-jasmine.git)</div><div class="line"></div><div class="line">keywords: lab, jasmine, require, requirejs, karma</div><div class="line">author: Stephen James</div><div class="line">license: (ISC) MIT</div><div class="line">About to write to C:\dev\lab-karma-require-jasmine\package.json</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Is this ok? (yes)</div></pre></td></tr></table></figure>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>Alternatively manually create package.json as follows…</p>
<p><script src="https://gist.github.com/stephen-james/248f67f5a4c4960d0bc0.js"></script></p>

<h2 id="Step-2-Setting-up-RequireJS-and-the-browser-default-page"><a href="#Step-2-Setting-up-RequireJS-and-the-browser-default-page" class="headerlink" title="Step 2 - Setting up RequireJS and the browser default page"></a>Step 2 - Setting up RequireJS and the browser default page</h2><p>To keep our JavaScript nice and modular and manageable we’re going to use <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>.</p>
<p>Install RequireJS as a dependency of the web app and save the dependency meta info in the <code>package.json</code> file.</p>
<p><code>npm install requirejs --save</code></p>
<p>Now in the root folder of the web app, we’re going to edit <code>index.html</code> to include a script reference to RequireJS.</p>
<p>Add the following script tag at the bottom of the <code>&lt;body&gt;</code></p>
<p><code>&lt;script src=&quot;node_modules/requirejs/require.js&quot; data-main=&quot;src/main.js&quot;&gt;&lt;/script&gt;</code></p>
<p>Our <code>index.html</code> now looks like this</p>
<p><script src="https://gist.github.com/stephen-james/dbb7560f1aeb26ba954d.js"></script></p>

<p>We’re referencing RequireJS in the location that npm has installed it for us and telling Require that it should bootstrap the app by running <code>src/main.js</code></p>
<p>If we were to run the web app now, we’d get a 404 because <code>src/main.js</code> doesn’t exist yet and RequireJS would throw a Script error.</p>
<p><a href="http://s84.photobucket.com/user/stephenhjames/media/stephenjamescodeblog/lab-karma-console_error_zpsc27bb087.jpg.html" target="_blank" rel="external"><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/lab-karma-console_error_zpsc27bb087.jpg" alt=" photo lab-karma-console_error_zpsc27bb087.jpg"></a></p>
<p>We need to set up our RequireJS bootstrap…</p>
<h2 id="Step-3-Setting-up-the-RequireJS-bootstrap-and-App-entry-point"><a href="#Step-3-Setting-up-the-RequireJS-bootstrap-and-App-entry-point" class="headerlink" title="Step 3 - Setting up the RequireJS bootstrap and App entry point"></a>Step 3 - Setting up the RequireJS bootstrap and App entry point</h2><p>In the <code>/src</code> folder we’re going to create two files, <code>main.js</code> and <code>app.js</code>. <code>main.js</code> will contain the JavaScript module configuration for RequireJS and <code>app.js</code> will be the real entry point to the web app, which will be fired up once RequireJS has performed it’s magic.</p>
<p>Install jQuery, it’ll serve as an example dependency for our app</p>
<p><code>npm install jquery --save</code></p>
<p>Create <code>src/app.js</code> and <code>src/main.js</code></p>
<p><script src="https://gist.github.com/stephen-james/69030f42916da98616df.js"></script></p>

<p>In <code>main.js</code>, we’re configuring RequireJS, telling it where to find jQuery and that once it’s configured the modules it should launch our app, by calling <code>app.start()</code></p>
<p>If we point a browser to <code>index.html</code> we should now see the simple message that the app has started up, coming from <code>app.js</code></p>
<p><code>this.target.html(&quot;App Started!&quot;);</code></p>
<p><a href="http://s84.photobucket.com/user/stephenhjames/media/stephenjamescodeblog/lab-karma-app-started_zps8eada00b.jpg.html" target="_blank" rel="external"><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/lab-karma-app-started_zps8eada00b.jpg" alt=" photo lab-karma-app-started_zps8eada00b.jpg"></a></p>
<h2 id="Step-4-Getting-some-Karma"><a href="#Step-4-Getting-some-Karma" class="headerlink" title="Step 4 - Getting some Karma!"></a>Step 4 - Getting some Karma!</h2><p>Now that the initial strawman is there for our web app, lets get that test runner going and start putting in some test specs!</p>
<p>We need to <a href="http://karma-runner.github.io/0.10/intro/installation.html" target="_blank" rel="external">install karma</a> as a development dependency of the application</p>
<p><code>npm install karma --save-dev</code></p>
<p>To run the karma client from the command line, we must install it globally</p>
<p><code>npm install karma-cli -g</code></p>
<p>Karma requires a <code>karma.conf.js</code> configuration file, which we can write to a file manually or create using the console ‘wizard’ by running <code>karma init</code>.</p>
<h3 id="Using-the-Karma-init-console-wizard"><a href="#Using-the-Karma-init-console-wizard" class="headerlink" title="Using the Karma init console wizard"></a>Using the Karma init console wizard</h3><p>Run the following from the command line</p>
<p><code>karma init</code></p>
<p>selecting the following values :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">C:\dev\lab-karma-require-jasmine</div><div class="line"></div><div class="line">&gt;karma init</div><div class="line"></div><div class="line">Which testing framework do you want to use ?</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; jasmine</div><div class="line"></div><div class="line">Do you want to use Require.js ?</div><div class="line">This will add Require.js plugin.</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; yes</div><div class="line"></div><div class="line">Do you want to capture any browsers automatically ?</div><div class="line">Press tab to list possible options. Enter empty string to move to the next quest</div><div class="line">ion.</div><div class="line">&gt; PhantomJS</div><div class="line">&gt; Chrome</div><div class="line">&gt;</div><div class="line"></div><div class="line">What is the location of your source and test files ?</div><div class="line">You can use glob patterns, eg. &quot;js/*.js&quot; or &quot;test/**/*Spec.js&quot;.</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt; node_modules/jquery/dist/jquery.js</div><div class="line">&gt; src/*.js</div><div class="line">&gt; test/**/*.spec.js</div><div class="line">WARN [init]: There is no file matching this pattern.</div><div class="line"></div><div class="line">&gt;</div><div class="line"></div><div class="line">Should any of the files included by the previous patterns be excluded ?</div><div class="line">You can use glob patterns, eg. &quot;**/*.swp&quot;.</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt; src/main.js</div><div class="line">&gt;</div><div class="line"></div><div class="line">Do you wanna generate a bootstrap file for RequireJS?</div><div class="line">This will generate test-main.js/coffee that configures RequireJS and starts the</div><div class="line">tests.</div><div class="line">&gt; yes</div><div class="line"></div><div class="line">Do you want Karma to watch all the files and run the tests on change ?</div><div class="line">Press tab to list possible options.</div><div class="line">&gt; yes</div><div class="line"></div><div class="line">RequireJS bootstrap file generated at &quot;C:\dev\lab-karma-require-jasmine\test-mai</div><div class="line">n.js&quot;.</div><div class="line"></div><div class="line">Config file generated at &quot;C:\dev\lab-karma-require-jasmine\karma.conf.js&quot;.</div><div class="line"></div><div class="line">C:\dev\lab-karma-require-jasmine</div><div class="line"></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>Ignore the warnings about non-matching files, provided you got the paths right that just means that those paths don’t contain any test specs yet.</p>
<p>Karma has now created a config file which describes how we want to Karma to perform <code>karma.conf.js</code> and an entry point for RequireJS (for Karma, not our app) <code>test-main.js</code>. To keep things clean, move the RequireJS entry point/bootstrap file to the test folder so that our structure now looks like this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/node_modules</div><div class="line">    /jquery</div><div class="line">    /karma</div><div class="line">    /karma-...</div><div class="line">    /...</div><div class="line">    /requirejs</div><div class="line"></div><div class="line">/src</div><div class="line">    app.js</div><div class="line">    main.js</div><div class="line"></div><div class="line">/test</div><div class="line">    test-main.js</div><div class="line"></div><div class="line">karma.conf.js</div><div class="line">package.json</div></pre></td></tr></table></figure>
<p>Edit <code>karma.conf.js</code> to look for <code>test-main.js</code> in the test folder.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">files: [</div><div class="line">  &apos;test/test-main.js&apos;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure>
<p><script src="https://gist.github.com/stephen-james/79be2549163bfa9ec7eb.js"></script></p>

<p>Edit <code>test/test-main.js</code> to look like the following</p>
<p><script src="https://gist.github.com/stephen-james/468af975472bc05c8e0a.js"></script></p>

<p>We’re changing a couple of values from the boilerplate template, setting the <code>baseUrl</code> to be <code>/base/src</code> so that dependency definitions are consistent between <code>main.js</code> and <code>test-main.js</code> and adding paths for jQuery and ensuring that the test folder has a relative mapping.</p>
<p>Start Karma up from the command line</p>
<p><code>karma start</code></p>
<p>Because we chose to have Chrome and PhantomJS as browsers for testing, the testrunner will show feedback in both the command line and a launched Chrome instance.</p>
<p><a href="http://s84.photobucket.com/user/stephenhjames/media/stephenjamescodeblog/lab-karma-chrome-test-runner_zps6a30c1f9.jpg.html" target="_blank" rel="external"><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/lab-karma-chrome-test-runner_zps6a30c1f9.jpg" alt=" photo lab-karma-chrome-test-runner_zps6a30c1f9.jpg"></a></p>
<p><a href="http://s84.photobucket.com/user/stephenhjames/media/stephenjamescodeblog/lab-karma-console-no-specs_zps1446bd8b.jpg.html" target="_blank" rel="external"><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/lab-karma-console-no-specs_zps1446bd8b.jpg" alt=" photo lab-karma-console-no-specs_zps1446bd8b.jpg"></a></p>
<h2 id="Step-5-Creating-a-Spec"><a href="#Step-5-Creating-a-Spec" class="headerlink" title="Step 5 - Creating a Spec"></a>Step 5 - Creating a Spec</h2><p>Create a subfolder <code>test/app</code> and create spec file <code>startup.spec.js</code>.</p>
<p><script src="https://gist.github.com/stephen-james/370f295ab3d306c3fb89.js"></script></p>

<p>Karma’s watcher will pick this spec up automatically and execute it</p>
<p><a href="http://s84.photobucket.com/user/stephenhjames/media/stephenjamescodeblog/lab-karma-console-with-specs_zpscbd4be51.jpg.html" target="_blank" rel="external"><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/lab-karma-console-with-specs_zpscbd4be51.jpg" alt=" photo lab-karma-console-with-specs_zpscbd4be51.jpg"></a></p>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>Two errors you can get pretty easily through misconfiguration are :</p>
<ul>
<li><code>There is no timestamp for /base/src/someScript.js</code></li>
<li><code>Mismatched anonymous define() module: ...</code></li>
</ul>
<h4 id="No-Timestamp-Errors"><a href="#No-Timestamp-Errors" class="headerlink" title="No Timestamp Errors"></a>No Timestamp Errors</h4><p>This indicates that Karma doesn’t have that file in it’s file list. All files need to be included in this list, the app files, library files / dependencies and test specs too. If a file is missing from this list, Karma will put up a warning for that particular file.</p>
<p>So in our sample app, if we modified our filelist in <code>karma.conf.js</code> from :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">files: [</div><div class="line">  &apos;test/test-main.js&apos;,</div><div class="line">  &#123; pattern: &apos;node_modules/jquery/dist/jquery.js&apos;, included: false &#125;,</div><div class="line">  &#123; pattern: &apos;src/*.js&apos;, included: false &#125;,</div><div class="line">  &#123; pattern: &apos;test/**/*.spec.js&apos;, included: false &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>to this (removing the jquery reference):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">files: [</div><div class="line">  &apos;test/test-main.js&apos;,</div><div class="line">  &#123; pattern: &apos;src/*.js&apos;, included: false &#125;,</div><div class="line">  &#123; pattern: &apos;test/**/*.spec.js&apos;, included: false &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Karma’s web server won’t serve the file and we’ll get error output similar to :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WARN [web-server]: 404: /base/node_modules/jquery/dist/jquery.js</div><div class="line">PhantomJS 1.9.7 (Windows 7) ERROR: &apos;There is no timestamp for /base/node_modules</div><div class="line">/jquery/dist/jquery.js!&apos;</div></pre></td></tr></table></figure>
<h4 id="Mismatched-anonymous-define-module"><a href="#Mismatched-anonymous-define-module" class="headerlink" title="Mismatched anonymous define() module"></a>Mismatched anonymous define() module</h4><p>Again this is an issue with <code>karma.confg.js</code>, when we’re using RequireJS with Karma we must make sure that any files that will be required as dependencies from the test specs are included in the file list with the <code>included: false</code> option. This will make sure that the script is not loaded twice (which causes the mismatch).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// list of files / patterns to load in the browser</div><div class="line">files: [</div><div class="line">  &apos;test/test-main.js&apos;,</div><div class="line">  &#123; pattern: &apos;node_modules/jquery/dist/jquery.js&apos;, included: false &#125;,</div><div class="line">  &#123; pattern: &apos;src/*.js&apos;, included: false &#125;,</div><div class="line">  &#123; pattern: &apos;test/**/*.spec.js&apos;, included: false &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>If you want to see this in action, we can simulate this problem by switching <code>included:true</code> on <code>src/*.js</code> using the lab files for an example.</p>
<p>Another thing to ensure is that the Application’s RequireJS bootstrap <code>main.js</code> is in the exclude setting.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// list of files to exclude</div><div class="line">exclude: [</div><div class="line">  &apos;src/main.js&apos;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="Using-Jasmine-2-0-with-Karma"><a href="#Using-Jasmine-2-0-with-Karma" class="headerlink" title="Using Jasmine 2.0 with Karma"></a>Using Jasmine 2.0 with Karma</h4><p>At the time of writing this, Karma installed Jasmine 1.3.1 by default, if you want to use version 2.0 of Jasmine, make sure you specify the Karma version to be 0.2.0 or higher… <a href="https://github.com/karma-runner/karma-jasmine/issues/15" target="_blank" rel="external">more info on Karma with Jasmine 2.0 here</a></p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2014/05/lab-beginners-guide-to-starting-new-web/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Code Snippet Happiness</title>
      <link>http://blog.stvjam.es/2014/02/code-snippet-happiness/</link>
      <guid>http://blog.stvjam.es/2014/02/code-snippet-happiness/</guid>
      <pubDate>Thu, 06 Feb 2014 00:00:00 GMT</pubDate>
      <description>
      
        The day I first caught a glimpse of snippet satori
      
      </description>
      
      <content:encoded><![CDATA[<p>When I was a kid eager to jump to our XT computer with a massive 20MB harddrive to play text based RPGs (where <code>@</code> was the lead character and <code>#</code> was a wall) my mother devised a cunning way to curb the habit. I could play when I wanted, but before I could play I had to do 10 minutes of Typing Tutor.</p>
<p>Fair, but I hated it.</p>
<p>But in hindsight, not a bad thing - I can type faster than I need to and I still had a childhood rich with many hours of hacking around in DOS, playing text games and levelling up my RPG characters.</p>
<p><img src="http://i84.photobucket.com/albums/k34/stephenhjames/stephenjamescodeblog/Nethack_screenshot_zpscbc253c2.png" alt=" Screenshot of an old NetHack style RPG for nostalgic purposes (courtesy of the Wikimedia Commons)
"></p>
<p>I’m of the opinion now that being able to type fast, just like being able to talk fast, can at times be detrimental. For stuff to come out right the first time without tumbling over itself it needs thought through and structured. Rushing to express something and simultaneously create structure for optimal delivery often muddies and flusters thoughts. Like when you’re pairing and the keyboard operator subconsciously pauses mid sentence or releases a long “Ummmmm…” while they’re fixing brackets and white space.</p>
<p>I was watching a Scott Allen video the other day and was once again impressed by his clear, concise communication and almost effortless live coding skills. He worked the keyboard like a magician, shortcutting ReSharper, using <code>prop</code> and <code>ctor</code> snippets frequently. Code spilled onto his screen with just a few keystrokes and was elegantly refactored with even less.</p>
<p>It suddenly dawned on me that that is what I was missing, I had an epiphany :</p>
<p><strong>Snippets aren’t just for slow folks!</strong></p>
<p><em>My fast typing had held me back</em>: I had dismissed snippets as useless and more effort than they’re worth, but here was evidence that they clearly were worth it.</p>
<p>I rushed to <code>Tools &gt; Code Snippets Manager</code> and started exploring which ones were out there that I could use. Inspired I made a few more for JavaScript stuff I commonly do and I have a feeling I’ll be making loads more while I build up my efficiency.</p>
<h2 id="Handy-JavaScript-Code-Snippets"><a href="#Handy-JavaScript-Code-Snippets" class="headerlink" title="Handy JavaScript Code Snippets"></a>Handy JavaScript Code Snippets</h2><p>There are a few of the snippets I’ve put together for common JavaScript stuff, like Immediately-Invoking functions, Revealing Module Pattern and jQuery Document Ready wrapper function <a href="https://gist.github.com/stephen-james/8842213" title="JavaScript Code Snippets" target="_blank" rel="external">here</a>.</p>
<p>But creating them is so easy and they can be so easily personalised to fit into how you as an individual dev think, that I’m kicking myself I haven’t used them more extensively before :)</p>
<h2 id="Useful-to-know"><a href="#Useful-to-know" class="headerlink" title="Useful to know"></a>Useful to know</h2><ul>
<li><p>In Studio 2012 Your custom code snippets are stored in <code>%USERPROFILE%\Documents\Visual Studio 2012\Code Snippets\JavaScript\My Code Snippets</code></p>
</li>
<li><p>To represent a $ in a code snippet you have to escape it using a double $$ (because $ is used to delimit variables)</p>
</li>
</ul>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2014/02/code-snippet-happiness/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Logging Custom Objects and Fields with log4net</title>
      <link>http://blog.stvjam.es/2014/01/logging-custom-objects-and-fields-with/</link>
      <guid>http://blog.stvjam.es/2014/01/logging-custom-objects-and-fields-with/</guid>
      <pubDate>Thu, 23 Jan 2014 00:00:00 GMT</pubDate>
      <description>
      
        A detail of my personal experience using log4nets custom layout patterns and converters.
      
      </description>
      
      <content:encoded><![CDATA[<p>I’ve used log4net in several projects to help with logging and debugging, but a unique requirement came up where I wanted to log not just human readable strings but to use the logging capability to store information about the actions users are performing on a MVC4 application.</p><br><p>I wanted to track the User, the Controller and the Action the user invoked, how long it took and if there was any error that occurred.  So I created a custom class to represent this called <code>ActionLoggerInfo</code> and an custom <code>ActionFilterAttribute</code> which I applied as a global filter which called log4net to log the object.</p><br><pre><code>public class ActionLoggerInfo<br>{<br>    public string Controller { get; set; }<br>    public string Action { get; set; }<br>    public string User { get; set; }<br>    public long ActionDurationInMillis { get; set; }<br>    public string ExceptionDetails { get; set; }<br><br>    public override string ToString()<br>    {<br>        return JsonConvert.SerializeObject(this);<br>    }<br>}<br></code></pre><br><br><p>I logged actions from the filter using the standard <code>Info</code> method.<br></p><br><pre><code>ILog _actionLogger = LogManager.GetLogger(&quot;ActionLogger&quot;);<br><br>. . .<br>var actionInfo = new ActionLoggerInfo()<br>{<br>    // set values of action info object<br>    …<br>};<br><br>_actionLogger.Info(actionInfo);<br></code></pre><br><br><p><em>Quite importantly the log4net log methods (<code>Debug</code>, <code>Info</code>, <code>Warn</code>, <code>…</code>) accept <code>message</code> as <code>object</code> and <em>not</em> as a <code>string</code>, which allows for neat decoupling of serialization to happen via configurable layout patterns and converters.</em></p><br><p>Overriding the <code>ToString</code> method of my custom <code>ActionLoggerInfo</code> class got me some of the way because when the default converters were called, they would invoke the <code>ToString</code> override and I could serialize the object to Json, but what I really wanted was for the individual fields of the custom info object to be saved in seperate columns of a table so that I could cobble together some very simple usage reporting for the site.  Since I was targetting a SQL environment having a message string that would have to be parsed for each logged row simply wouldn’t cut it.</p><br><p>I needed a way to map individual fields in the log to columns in an <code>AdoNetAppender</code>.</p><br><p>Out the box, log4net provides a bunch of <a href="http://logging.apache.org/log4net/release/sdk/log4net.Util.PatternString.html" target="_blank" rel="external">conversion pattern names</a> that can be used in the log pattern string to shape your log, written in <code>printf</code> style (for example <code>%message</code>).  To solve the problem I needed to introduce a new named pattern to represent my custom object and then be able to address individual fields within it.</p><br><h3>Adding a named Conversion Pattern</h3><br><p>The route I took to do this was to create a custom <code>PatternLayout</code> class in order to introduce the new conversion pattern name <code>%actionInfo</code> for the <code>ActionLoggerInfo</code> class.</p><br><pre><code>public class ActionLayoutPattern : PatternLayout<br>{<br>    public ActionLayoutPattern()<br>    {<br>        AddConverter(new ConverterInfo<br>            {<br>                Name = &quot;actionInfo&quot;,<br>                Type = typeof(ActionConverter)<br>            }<br>        );<br>    }<br>}<br></code></pre><br><br><p>You’ll notice that there is no link to <code>ActionLoggerInfo</code> directly in this pattern, it only serves to establish the name &quot;actionInfo&quot; and the converter <code>ActionConverter</code> to be used to perform the conversion.</p><br><h3>The Converter</h3><br><p>The converter is responsible for handling conversion requests of a <code>LoggingEvent</code> when log4net calls it internally to render a given pattern name to the writer.  The converter can then inspect whichever aspect of the <code>LoggingEvent</code> it needs to retrieve the value to write, including the <code>MessageObject</code> that was originally logged.<br></p><br><p>Since we’re passing the custom object in as the <code>MessageObject</code> we have everything that we need to inspect the object and pull out the fields that we want to log wh.</p><br><p>Patterns in log4net follow a %<em>conversionPatternName</em>{<em>option</em>} syntax.  Where the <em>conversionPatternName</em> is used to identify which converter to use from the <code>PatternLayout</code>‘s list of converters, and the <em>option</em> in squiggly brackets allows you to pass additional information.</p><br><p>In the case of a custom object this gives us the mechanism we need to specify which field of an object we are wanting to render. eg. <code>%actionInfo{controller}</code></p><br><p>The <code>option</code> in the <code>%&lt;conversionPatternName&gt;{&lt;option&gt;}</code> pattern syntax is extracted and mapped to <code>ActionConvert.Option</code> when the converter is invoked, so it is trivial to inspect it and return the field you want.</p><br><pre><code>public class ActionConverter : PatternConverter<br>{<br>    protected override void Convert(System.IO.TextWriter writer, object state)<br>    {<br>        if (state == null)<br>        {<br>            writer.Write(SystemInfo.NullText);<br>            return;<br>        }<br><br>        var loggingEvent = state as LoggingEvent;<br>        var actionInfo = loggingEvent.MessageObject as ActionLoggerInfo;<br><br>        if (actionInfo == null)<br>        {<br>            writer.Write(SystemInfo.NullText);<br>        }<br>        else<br>        {<br>            switch(this.Option.ToLower())<br>            {<br>                case &quot;controller&quot; :<br>                    writer.Write(actionInfo.Controller);<br>                    break;<br>                case &quot;action&quot; :<br>                    writer.Write(actionInfo.Action);<br>                    break;<br>                case &quot;duration&quot; :<br>                    writer.Write(actionInfo.ActionDurationInMillis);<br>                    break;<br>                case &quot;user&quot; :<br>                    writer.Write(actionInfo.User);<br>                    break;<br>                case &quot;exceptiondetails&quot; :<br>                    writer.Write(actionInfo.ExceptionDetails);<br>                    break;<br>                default :<br>                    writer.Write(SystemInfo.NullText);<br>                    break;<br>            }<br>        }<br>    }<br>}<br></code></pre><br><br><p><em>Using a bit of Reflection it would be easy to make a generic object converter that could reflect to extract the values properties of an object based on the option parameter, but for my purposes the <code>switch</code> statement was adequate</em></p><br><h3>Creating the Log Table in the database</h3><br><pre><code>CREATE SCHEMA [Logs]<br><br>GO<br><br>CREATE TABLE [Logs].[Actions]<br>(<br>    [Id] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,<br>    [Date] [datetime] NOT NULL,<br>    [Thread] [varchar] (255) NOT NULL,<br>    [Level] [varchar] (50) NOT NULL,<br>    [Logger] [varchar] (255) NOT NULL,<br>    [Message] [varchar] (4000) NOT NULL,<br>    [Exception] [varchar] (2000) NULL,<br>    [Controller] [varchar] (2000) NULL,<br>    [Action] [varchar] (2000) NULL,<br>    [User] [varchar] (2000) NULL,<br>    [Duration] [int] NULL<br>)<br></code></pre><br><br><p>Easily done.</p><br><h3>Configuring the AdoNetAppender</h3><br><p>We have to modify the <code>commandText</code> of the appender to contain the new database fields and parameters for the custom object’s fields.</p><br><p>Each parameter is then specified explicitly with our custom <code>PatternLayout</code> (in this example <code>MyApp.ActionLayoutPattern</code>) and with a <code>conversionPattern</code> that uses the custom conversion pattern name (in this example <code>%actionInfo</code>) and the field <code>{controller}</code>. </p><br><pre><code>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@controller&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;2000&quot; /&gt;<br>        &lt;layout type=&quot;MyApp.ActionLayoutPattern&quot;&gt;<br>          &lt;conversionPattern value=&quot;%actionInfo{controller}&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br></code></pre><br><br><p>Full appender config example : </p><br><pre><code>  &lt;log4net&gt;<br>    &lt;appender name=&quot;AdoNetAppender&quot; type=&quot;log4net.Appender.AdoNetAppender&quot;&gt;<br>      &lt;bufferSize value=&quot;100&quot; /&gt;<br>      &lt;connectionType value=&quot;System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&gt;<br>      &lt;connectionString value=&quot;Data Source=(localdb)\Projects;Initial Catalog=LoggingDB;Integrated Security=true;&quot; /&gt;<br>      &lt;commandText value=&quot;INSERT INTO [Logs].[Actions] ([Date],[Thread],[Level],[Logger],[Message],[Exception],[Controller],[Action],[User],[Duration]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception, @controller, @action, @user, @duration)&quot; /&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@log_date&quot; /&gt;<br>        &lt;dbType value=&quot;DateTime&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.RawTimeStampLayout&quot; /&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@thread&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;255&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;<br>          &lt;conversionPattern value=&quot;%thread&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@log_level&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;50&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;<br>          &lt;conversionPattern value=&quot;%level&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@logger&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;255&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;<br>          &lt;conversionPattern value=&quot;%logger&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@message&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;4000&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;<br>          &lt;conversionPattern value=&quot;%message&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@exception&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;2000&quot; /&gt;<br>        &lt;layout type=&quot;log4net.Layout.ExceptionLayout&quot; /&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@controller&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;2000&quot; /&gt;<br>        &lt;layout type=&quot;Beam.Ui.Filters.ActionLayoutPattern&quot;&gt;<br>          &lt;conversionPattern value=&quot;%actionInfo{controller}&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@action&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;2000&quot; /&gt;<br>        &lt;layout type=&quot;Beam.Ui.Filters.ActionLayoutPattern&quot;&gt;<br>          &lt;conversionPattern value=&quot;%actionInfo{action}&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@user&quot; /&gt;<br>        &lt;dbType value=&quot;String&quot; /&gt;<br>        &lt;size value=&quot;2000&quot; /&gt;<br>        &lt;layout type=&quot;Beam.Ui.Filters.ActionLayoutPattern&quot;&gt;<br>          &lt;conversionPattern value=&quot;%actionInfo{user}&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>      &lt;parameter&gt;<br>        &lt;parameterName value=&quot;@duration&quot; /&gt;<br>        &lt;dbType value=&quot;Int32&quot; /&gt;<br>        &lt;layout type=&quot;Beam.Ui.Filters.ActionLayoutPattern&quot;&gt;<br>          &lt;conversionPattern value=&quot;%actionInfo{duration}&quot; /&gt;<br>        &lt;/layout&gt;<br>      &lt;/parameter&gt;<br>    &lt;/appender&gt;<br><br>    …<br><br>  &lt;/log4net&gt;<br></code></pre><br><br><p>Great I hope that helps someone else in a similar position.<br></p><br><h2>Related Articles</h2><br><p>Here are the articles that helped me along the way…</p><br><p><a href="http://dejanfajfar.wordpress.com/2011/04/14/log4net-custom-layoutpattern/" target="_blank" rel="external">Log4Net custom LayoutPattern - Dejan Fajfar (April 2011)</a></p><br><p><a href="http://www.hanselman.com/blog/CreatingYourOwnCustomPatternLayoutPatternParserAndPatternConvertorWithLog4net.aspx" target="_blank" rel="external">Creating your own Custom PatternLayout, PatternParser, and PatternConvertor with log4net - Scott Hanselman (Jul 2004)</a></p><br><p><a href="http://cowarthill.com/blog/index.php/2009/12/23/log4net-patternstring/" target="_blank" rel="external">log4net PatternString - House of Metnetsky ()</a></p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2014/01/logging-custom-objects-and-fields-with/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Adding forgotten files to previous commits with Git</title>
      <link>http://blog.stvjam.es/2013/09/adding-forgotten-files-to-previous/</link>
      <guid>http://blog.stvjam.es/2013/09/adding-forgotten-files-to-previous/</guid>
      <pubDate>Wed, 11 Sep 2013 23:00:00 GMT</pubDate>
      <description>
      
        We all do it, in the heat of the moment we stage badly, &lt;code&gt;git commit --amend -C &lt;SHA&gt;&lt;/code&gt; to the rescue!
      
      </description>
      
      <content:encoded><![CDATA[<p>It’s incredibly easy to forget to stage all your files for a given commit.  Whether its an untracked file that you only realise should be tracked few commits down the road, or if you’re divving up changed files to stage and commit them logically and in doing so leave a file out accidentally, its something that is bound to happen sooner or later.<br><br><br><br>&nbsp;In my team we’ve decided that we’re going to strive for more granular commits to make our repository version history more meaningful, as a result the above has been happening to me a lot more often than usual!&nbsp;<br><br><br><br><br>In the past I would just create a new commit and include the file with some sort of apologetic comment, but thinking of the bigger picture it makes sense to maintain a brighter, cleaner repo where contributors can theoretically checkout any revision and for it to be exactly what it says on the tin (ie. the commit message and description).<br><br><br></p>
<p></p><h4><br>Adding an unstaged file to a previous commit<br><br><span style="font-weight: normal;">So you’ve run git status and found out that you have an unstaged file that should be added to a previous commit.</span></h4><p></p>
<p></p><h4><p></p>
<pre>C:\Code\GitTrackingExample&gt;git status
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       <span style="background-color: yellow;">bootstrap.less</span>
nothing added to commit but untracked files present (use "git add" to track)
</file></pre>
<span style="font-weight: normal;"><br></span><span style="font-weight: normal;">Running git log or using your Git client of choice should give you a list of commits</span></h4>
<pre>C:\Code\GitTrackingExample&gt;git log
WARNING: terminal is not fully functional
commit 75667aea53252063388914fcf9f07e1bd52cd654
Author: Stephen James <stephenjames notmyemail.com="">
Date:   Thu Sep 12 13:05:57 2013 +0100

    modified page header

commit <span style="background-color: yellow;">af2eb46</span>ec051d2f4b7f8e4eb82ce59a7905f4290
Author: Stephen James <stephenjames notmyemail.com="">
Date:   Thu Sep 12 13:03:47 2013 +0100

    <span style="background-color: yellow;">adding style to the site</span>

commit e9877d1469716b3fc3afe282742300f9f24b18bf
Author: Stephen James <stephenjames notmyemail.com="">
Date:   Thu Sep 12 13:01:40 2013 +0100

    created site
</stephenjames></stephenjames></stephenjames></pre>
<div>
<br></div>
This particular change is related to "adding style to the site", (commit af2eb46) so to stage the untracked file and add it to that commit I'll do the following :

<br>
<br>
<br>
<ol>
<li>Stage the file<br>
<code>git add bootstrap.less<br><span style="font-family: Times New Roman;"><br></span></code></li>
<li>Commit it to the desired revision (commit af2eb46)<br><br>
<pre>C:\Code\GitTrackingExample&gt;git commit --amend -C af2eb46
[master 226b94c] adding style to site
 2 files changed, 1 insertion(+)
 create mode 100644 bootstrap.less
</pre>
</li>
<br>
<li>When you're happy that everything is well staged and cleanly committed, push to the upstream repo<br>
<code>git push</code>
</li>
</ol>
And thats a really simple easy way to do it. &nbsp;Of course if you want to test each revision and the staged changes (which is always a good idea before pushing upstream) you'd want to checkout to that revision first and run your tests.<br>
<br>
<h4>
Amend and it's parameters</h4>
<div>
--amend will add the staged files to the commit with the specified hash, but optionally will allow you to modify the commit message. &nbsp;</div>
<div>
<br></div>
<div>
If you want to pop in a completely new message,&nbsp;</div>
<div>
<br></div>
<div>
<pre>git commit --amend -m "new commit message" &lt;revision hash&gt;</pre>
or if you want to leave it untouched, use&nbsp;

<pre>git commit --amend -C &lt;revision hash&gt;</pre>

<p>(as we did in the example above)</p>
<p>or if you want to edit this on the fly in your terminal/console with vi, just leave out the <code>-C</code> argument and it’ll bring that up for direct editing.<br></p></div><p></p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2013/09/adding-forgotten-files-to-previous/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Using CSS to Vertically Center Content</title>
      <link>http://blog.stvjam.es/2013/04/using-css-to-vertically-center-content/</link>
      <guid>http://blog.stvjam.es/2013/04/using-css-to-vertically-center-content/</guid>
      <pubDate>Fri, 26 Apr 2013 23:00:00 GMT</pubDate>
      <description>
      
        A now outdated look at vertically centering content, kept for historical purposes
      
      </description>
      
      <content:encoded><![CDATA[<p><span style="font-family: Arial, Helvetica, sans-serif;">You might wonder why I’m writing this. &nbsp;It’s been posted about time and time again, with various methods detailed in excellent blog posts, for example Gavin Kistner’s post&nbsp;<a href="http://phrogz.net/css/vertical-align/" target="_blank" rel="external">Understanding vertical-align, or “How (Not) To Vertically Center Content”</a>, but the reason is two-fold :&nbsp;</span><br></p>
<p><ul></ul></p>
<p><li><span style="font-family: Arial, Helvetica, sans-serif;">Centering solutions based on knowledge of element heights should be deprecated now that we are adopting fluid and responsive layouts where widths (and hence heights) will vary greatly.</span></li><br></p>
<p><ul></ul></p>
<p><li><span style="font-family: Arial, Helvetica, sans-serif;">CSS grew up a bit, got some irregularly supported pimples (The Flexible Box Module Draft&nbsp;<code>display : box</code>), exfoliated for months with W3C scrub and became the incredibly good lookin CSS3 &nbsp;(with Flexible Box Module&nbsp;<code>display : flex</code></span><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;">)</span><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><br></span></li><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;">So to start lets throw out any idea of trying to center objects using </span><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><code>margin : <i>-n</i> px</code></span><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"> and variants thereof and look at three ideas that work regardless of element heights.</span><br></p>
<div><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><br><br><h3><br><span style="font-family: Arial, Helvetica, sans-serif;">Method 1 - Display as a Table Cell</span></h3><br></div><br><div><br><span style="font-family: Arial, Helvetica, sans-serif;">If you grew up in the bad old days of table layouts, you will be very familiar with the fact that table cells have a useful ability to center inline elements vertically, by setting the <code>vertical-align</code> property</span><br><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><iframe src="http://jsfiddle.net/stephen_james/4AzzV/embedded/html,result/" style="height: 200px; width: 100%;"><br></iframe><br><br><br><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><span style="font-family: Arial, Helvetica, sans-serif;">Of course now we’re older and wiser and despise tables for displaying anything that isn’t tabular, but we <i>can</i> make a div behave like a table cell and vertically align stuff using &nbsp;<code>display : table-cell </code></span><span style="font-family: Arial, Helvetica, sans-serif;">.</span><br><br><br><br><iframe src="http://jsfiddle.net/stephen_james/4AzzV/1/embedded/css,html,result/" style="height: 200px; width: 100%;"><br></iframe><br><br><br><br><br><br><span style="font-family: Arial, Helvetica, sans-serif;">Naturally loads cleaner than the extra table tags, but it still doesn’t sit 100% well with me. &nbsp;It isn’t really a table cell, it doesn’t sit in a table and the only reason I am styling it as such is to take advantage of one behaviour and that is vertical alignment. &nbsp;Still, it is a method that works consistently across a wide range of browsers (old and new).</span><br><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><i><span style="font-family: Arial, Helvetica, sans-serif;">But what about a purer way? &nbsp;How about the purpose built&nbsp;</span><span style="font-family: Arial, Helvetica, sans-serif;">CSS Flexible Box Layout Module which exposes css properties for alignment and justification. &nbsp;</span></i><br><br><i><span style="font-family: Arial, Helvetica, sans-serif;"><br></span></i><i><span style="font-family: Arial, Helvetica, sans-serif;">The only trouble is which version to use due to irregular browser support.</span></i><br><br><i><span style="font-family: Arial, Helvetica, sans-serif;"><br></span></i><br><br><br><h3><br><span style="font-family: Arial, Helvetica, sans-serif;">Method 2 - Flexible Box Layout Module (2009 Draft)</span></h3><br><span style="font-family: Arial, Helvetica, sans-serif;">Here we only use the bits we really need from the flexible box module. &nbsp;In other words, to say we’re looking to use the flexible box module <code>display : box</code>, we want a horizontal layout <code>box-orient : horizontal</code> and we want everything aligned centrally. <code>box-align : center</code></span><span style="font-family: Arial, Helvetica, sans-serif;">. &nbsp;With browser specific prefixes this becomes a bit more verbose, but you get the idea.</span><br><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><iframe src="http://jsfiddle.net/stephen_james/qP5W8/1/embedded/css,html,result/" style="height: 200px; width: 100%;"><br></iframe><br><br><br><br><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;">For uses of the draft beyond just vertical alignment, take a look at the <a href="http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/" target="_blank" rel="external">W3C 2009 Draft</a></span><br><br><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><i>Its worth noting that you can use this version of the module with legacy browsers by including the&nbsp;<a href="http://flexiejs.com/" target="_blank" rel="external">flexie.js</a>&nbsp;</i>shim</span><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><h3><br><span style="font-family: Arial, Helvetica, sans-serif;">Method 3 - Flexible Box Layout Module (CSS3)</span></h3><br><div><br><span style="font-family: Arial, Helvetica, sans-serif;">Probably the best description of the CSS3 flexible box module can be found in the <a href="https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_flexible_boxes" target="_blank" rel="external">MDN documentation</a>. &nbsp;Worth noting is the comment at the bottom of the document : &nbsp;&nbsp;</span><i><span class="Apple-style-span" style="color: #333333; font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Lucida, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px;">Firefox supports only single-line flexbox. To activate flexbox support, the user has to change the about:config preference “layout.css.flexbox.enabled” to&nbsp;</span><span class="Apple-style-span" style="color: #333333; font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Lucida, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px;"><code style="font-weight: inherit; font: normal normal normal 100%/normal 'Courier New', 'Andale Mono', monospace;">true</code></span><span class="Apple-style-span" style="color: #333333; font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'DejaVu Sans', Lucida, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px;">.</span></i></div><br><div><br><span style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><span style="font-family: Arial, Helvetica, sans-serif;">Our implementation is similar to the Flexbox Draft solution in Method 2 except for property names which have changed with the specification</span><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;">… So again, we’re saying “hey, using the box layout module, set this to row/horizontal and centrally align it”.</span><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><br></span></div><br><iframe src="http://jsfiddle.net/stephen_james/hZGyD/1/embedded/css,html,result/" style="height: 200px; width: 100%;"><br></iframe><br><br><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;">At the time of writing this, this worked only with Chrome and Firefox (with the about:config preference changed mentioned above - which I doubt our users will have done). &nbsp;</span><br><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><br></span><br><h3><br></h3><br><h3 style="font-size: medium;"><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif;"><h3 style="font-family: Times;"><br><span style="font-family: Arial, Helvetica, sans-serif;">Wrap Up</span></h3><br></span></h3><br><div><br><span class="Apple-style-span" style="font-family: Arial, Helvetica, sans-serif; font-size: small;"><span class="Apple-style-span" style="font-weight: normal;">Which method you choose should really be all about your target browser audience. &nbsp;If you’re needing to reach everyone with the minimum amount of performance impact (i.e. without including shims etc), the old table-cell hack in Method 1 may actually be the best. &nbsp;If you’re in the rare position of working for a future audience who use modern browsers, Methods 2&amp;3&nbsp;are where its at. &nbsp;To cover more bases, you could use <a href="http://modernizr.com/" target="_blank" rel="external">Modernizr</a>,&nbsp;create CSS rules that work with the “flexbox” class it will pop on all browsers that support it and use methods 1, or 2&amp;3 accordingly.</span></span></div><br></div>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2013/04/using-css-to-vertically-center-content/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Building a Tree in JavaScript to convert flat CSV to hierarchical JSON</title>
      <link>http://blog.stvjam.es/2013/03/building-tree-in-javascript-to-convert/</link>
      <guid>http://blog.stvjam.es/2013/03/building-tree-in-javascript-to-convert/</guid>
      <pubDate>Mon, 25 Mar 2013 00:00:00 GMT</pubDate>
      <description>
      
        Describes converting CSV data to a JSON tree using custom JavaScript classes.
      
      </description>
      
      <content:encoded><![CDATA[<p>I wanted to convert hierarchical data expressed in a flattened self-referencing table (in csv) back to a decent hierarchical JSON structure.</p>
<p>In other words…</p>
<p><a href="http://1.bp.blogspot.com/-aQY0ek6ItpM/UU_64BcRJ7I/AAAAAAAAAEc/D8vZ5m7A9zE/s1600/data-transform-illustration.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;" target="_blank" rel="external"><img border="0" src="http://1.bp.blogspot.com/-aQY0ek6ItpM/UU_64BcRJ7I/AAAAAAAAAEc/D8vZ5m7A9zE/s1600/data-transform-illustration.png"></a></p>
<p>To do this I created a few javascript classes to support a simple tree datastructure <code>DataStructures.Tree</code>.  You can find the source, an example using d3 to illustrate the hierarchy and tests <a href="https://github.com/stephen-james/DataStructures.Tree/" target="_blank" rel="external">on github</a>.</p>
<p>Tree has a root node, the ability to find a node in itself (given an optional matching function) and importantly a factory method that can create a tree given a flat self referencing table. <code>DataStructures.TreeNode</code> has <code>children</code> reference which is instantiated as a <code>DataStructures.TreeNodeCollection</code>.</p>
<p>To simplify traversal I made <code>Tree</code> able to iterate through its nodes by using a depth first non-recursive approach (by using a queue) to finding the next node.</p>
<p>Once I had the initial structure in place, the next task was to convert from this Tree structure and its attributes (which had a lot to do with traversal and relationships), back to a simple leaner json object, so I added a toSimpleObject method, which also allows for a decorator function to be passed in to do bespoke formatting/manipulation.</p>
<p>This was particularly useful for the d3 case that I wanted to use this with (see example in index.html), where I needed to add size values to leaf nodes and remove empty children attributes to indicate which nodes are actually leaves.</p>
<p>There are quite a few potential improvements I’ve already identified, in the building of the tree from csv I assume that parent nodes already exist when I come across a child row, and the algorithm could and should be optimized, but for now, I’m getting what I want from it!</p>
<p>If you’re interested, theres a set of unit tests written with QUnit to illustrate how it all fits together in the repo <a href="https://github.com/stephen-james/DataStructures.Tree/tree/master/js/lib/tests" target="_blank" rel="external">/js/lib/tests</a>.</p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2013/03/building-tree-in-javascript-to-convert/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Circlesque Iconset</title>
      <link>http://blog.stvjam.es/2013/03/circlesque-iconset/</link>
      <guid>http://blog.stvjam.es/2013/03/circlesque-iconset/</guid>
      <pubDate>Tue, 05 Mar 2013 00:00:00 GMT</pubDate>
      <description>
      
        &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;A basic iconset I created for the &lt;a href=&quot;http://www.pmsi-consulting.com/&quot; ta
      
      </description>
      
      <content:encoded><![CDATA[<div class="separator" style="clear: both; text-align: left;">A basic iconset I created for the <a href="http://www.pmsi-consulting.com/" target="_blank" rel="external">PMSI</a> pricing project.  Available in <a href="https://raw.github.com/stephen-james/img/master/circlesque-iconset/iconset_circlesque_icons.svg" target="_blank" rel="external">.svg</a> and <a href="https://github.com/stephen-james/img/blob/master/circlesque-iconset/iconset_circlesque_icons.xar" target="_blank" rel="external">.xar</a>.  Requires <a href="http://cooltext.com/Download-Font-%E7%B2%97%E6%A5%B7%E4%BD%93%E7%AE%80+Kai+Bold" target="_blank" rel="external">Kai Bold</a> font for the translation icon.</div>

<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/--TaT_yLae-Y/UTXVm9VaInI/AAAAAAAAAEM/s0rKGCk9r3k/s1600/iconset_circlesque_icons.png" target="_blank" rel="external"><img src="http://3.bp.blogspot.com/--TaT_yLae-Y/UTXVm9VaInI/AAAAAAAAAEM/s0rKGCk9r3k/s640/iconset_circlesque_icons.png" alt=""></a></div>

<p><a href="http://creativecommons.org/licenses/by/3.0/deed.en_GB" target="_blank" rel="external"><img src="http://i.creativecommons.org/l/by/3.0/88x31.png" alt="Creative Commons Licence"></a><br><span property="dct:title" xmlns:dct="http://purl.org/dc/terms/">Circlesque Iconset</span> by <span property="cc:attributionName" xmlns:cc="http://creativecommons.org/ns#">Stephen James (@stephenhjames)</span> is licensed under a <a href="http://creativecommons.org/licenses/by/3.0/deed.en_GB" target="_blank" rel="external">Creative Commons Attribution 3.0 Unported License</a>.  Use freely, if you want to, even better drop me a line and send improvements if you do :)</p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2013/03/circlesque-iconset/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Automating Rasterization of HTML elements on a Page</title>
      <link>http://blog.stvjam.es/2013/01/automating-rasterization-of-html/</link>
      <guid>http://blog.stvjam.es/2013/01/automating-rasterization-of-html/</guid>
      <pubDate>Wed, 16 Jan 2013 00:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS&lt;/a&gt; is a headless Webkit browser.  In other words, it’s all the 
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a> is a headless Webkit browser.  In other words, it’s all the awesome of Safari/Chrome without the UI and is capable of injecting Javascript into a loaded page, evaluating expressions within the browser sandbox and <a href="https://github.com/ariya/phantomjs/wiki/Screen-Capture" target="_blank" rel="external">screen capture</a>.  </p>
<p>Its that last little bit that I’m really interested in, screen capture, so I headed along and found this simple <a href="https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js" target="_blank" rel="external">rasterize.js</a> script (provided by the creator of PhantomJS)  which is good for taking full screenshots of your web-browser, but not so good if you are wanting to only take a screenshot of a particular element.  </p>
<p>So I wrote a script called <a href="https://gist.github.com/4540264" target="_blank" rel="external">rasterizeElement.js</a> which takes advantage of the webpage object’s clipRect property and sets the clipping rectangle according to the boundaries of the element you are selecting.  </p>
<div class="gistLoad" data-id="4540264" id="gist-GistID">Loading ….</div>

<p>You can use rasterizeElement like this :  </p>
<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a><strong><span style="font-size: large;">Getting Started</span></strong></h3><ol>
<li>Download and install <a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a> (if you haven’t already)</li>
<li>Download  <a href="https://gist.github.com/4540264" target="_blank" rel="external">rasterizeElement.js</a> and save it in the same folder as PhantomJS</li>
<li>Run the script according to the Usage Guidelines below</li>
</ol>
<div><br><br>### <strong><span style="font-size: large;">Usage Guidelines</span></strong><br><br></div>

<p>You can see the guidelines just by running the script with <code>phantomjs rasterizeElement.js</code>  </p>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-2FOWU_PlqK0/UPZ8YLIWHbI/AAAAAAAAABQ/4Ozdccfutfw/s1600/rasterizeElement+usage+temp.png" target="_blank" rel="external"><img src="http://1.bp.blogspot.com/-2FOWU_PlqK0/UPZ8YLIWHbI/AAAAAAAAABQ/4Ozdccfutfw/s400/rasterizeElement+usage+temp.png" alt=""></a></div>

<p> the selector parameter, <code>renderElementBySelector</code>, can be any valid CSS selector because under the hood this gets passed to <code>document.querySelector()</code> method to get a reference to the element in the DOM.  </p>
<h3 id="Bits-and-Bobs-Under-the-Hood"><a href="#Bits-and-Bobs-Under-the-Hood" class="headerlink" title="Bits and Bobs Under the Hood"></a><strong><span style="font-size: large;">Bits and Bobs Under the Hood</span></strong></h3><div>If  you are going to modify or want to work with the rasterizeElement script, here are some things that are worth a mention…</div>

<ul>
<li>I was unable to get an realistic clipping rectangle for the selected element until I used the page.evaluate function.  This was due to my PhantomJS ignorance, it makes sense that evaluation of the webpage happens in this controlled sandbox.</li>
<li>If you want to use the optional arguments viewPortsize and paperSize, you will have to escape your object literals in the command line.</li>
<li>Refer to the original file rasterize.js to see acceptable papersizes if you are wanting non A4 pdf</li>
</ul>
<p><em>Ping me on Twitter (<a href="https://twitter.com/stephenhjames" target="_blank" rel="external">@stephenhjames</a>) if you have any suggestions or modifications to this script, or fork the <a href="https://gist.github.com/4540264" target="_blank" rel="external">gist</a> on <a href="https://gist.github.com/stephen-james" target="_blank" rel="external">github</a> and drop a comment</em></p>
]]></content:encoded>
      
      <comments>http://blog.stvjam.es/2013/01/automating-rasterization-of-html/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
